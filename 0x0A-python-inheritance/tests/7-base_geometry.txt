===========================
module "7-base_geometry.py" 
===========================

==================================
Using "integer_validator function"
==================================

Import function from the module:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

test1: Testing area():
    >>> bg = BaseGeometry()
    >>> bg.area()
    Traceback (most recent call last):
    ...
    Exception: area() is not implemented

test2: Passing name and string value:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", "test")
    Traceback (most recent call last):
    ...
    TypeError: my_int must be an integer

test3: Passing name and int value:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12)

test4: Passing name and list value:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", [1, 2, 4, 5])
    Traceback (most recent call last):
    ...
    TypeError: my_int must be an integer



test5: Passing name and inf value:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", float('inf'))
    Traceback (most recent call last):
    ...
    TypeError: my_int must be an integer

test6: Passing name and float value:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 1.8)
    Traceback (most recent call last):
    ...
    TypeError: my_int must be an integer

test7: Passing name and tuple value:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", (4, 5))
    Traceback (most recent call last):
    ...
    TypeError: my_int must be an integer

test8: Passing name and bool value:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", True)
    Traceback (most recent call last):
    ...
    TypeError: my_int must be an integer

test9: Passing name and dict value:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", {3, 7})
    Traceback (most recent call last):
    ...
    TypeError: my_int must be an integer

test10: Passing value equal to 0:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 0)
    Traceback (most recent call last):
    ...
    ValueError: my_int must be greater than 0

test11: Passing value less than 0:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", -5)
    Traceback (most recent call last):
    ...
    ValueError: my_int must be greater than 0

test12: Passing name only:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

test13: Passing None as name:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int")
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 1 required positional argument: 'value'

test14: Passing None as value:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", None)
    Traceback (most recent call last):
    ...
    TypeError: my_int must be an integer

test15: Passing Nothing:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator()
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

test16: Passing more than 2 values:
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 12, 150)
    Traceback (most recent call last):
    ...
    TypeError: integer_validator() takes 3 positional arguments but 4 were given
